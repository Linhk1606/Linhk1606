<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法笔记-LCA-2</title>
      <link href="/2020/02/06/algorithm-lca-2/"/>
      <url>/2020/02/06/algorithm-lca-2/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p> LCA系列的续集 (换一种方式)</p></blockquote><a id="more"></a><h1 id="那就直接开始讲吧"><a href="#那就直接开始讲吧" class="headerlink" title="那就直接开始讲吧"></a>那就直接开始讲吧</h1><p>LCA的 <strong>Tarjan</strong> 算法</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>前置操作分为以下几步:</p><ol><li>使用 <strong>DFS</strong> 遍历整棵树</li><li>当一个节点被访问过时, 将其标记为<code>1</code></li><li>当一个节点<strong>及其子树</strong>(或其本身就是<strong>叶子节点</strong>)都被访问过时, 将该点标记为<code>2</code></li></ol><p>这样, 在任意一次操作过后, 都会出现如下情况:</p><p>所有的标记为<code>2</code>的节点, 共同构成<strong>一棵子树</strong></p><p>且该子树总是在整棵树的<strong>左下处</strong></p><p>从动态的角度来看, 就是一棵全为<code>2</code>的子树, 从左下角的那个叶子节点处缓缓地”长”了出来</p><p>这样有什么好处呢</p><p>这个性质可以帮助我们很好地离线解决$\text{LCA}$问题</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>建立一个<strong>并查集</strong>: <code>father[]</code></p><p>在搜索的<strong>返回</strong>过程中, 将已经变成<code>2</code>的那个节点的<code>father</code>设为它的父亲节点(相当于把该节点”缩”到了其父亲节点上)</p><p>在搜索的返回前, 即遍历完该节点的子树后, 判断该节点$u$有没有被”提问”过</p><p>如果有, 假设提问为$lca(u, v)$, 则标记答案为<code>getfather(v)</code>, 其中<code>getfather()</code>函数为并查集自带的查找祖先节点的函数</p><ul><li>为什么?</li></ul><p>根据上边的结论, 此时的<code>getfather(v)</code>即为那棵全为<code>2</code>的子树的根节点$root’$,  $\because u$和$v$<strong>均在这棵子树上</strong>, $\therefore root’$为$u$和$v$的<strong>公共祖先</strong></p><p>考虑$\text{DFS}$序, $\because$dfs访问完一个节点不会马上往上走, 而是会去<strong>遍历其它节点</strong>, $\therefore root’$以下没有一个$root’’$满足是$u$和$v$的<strong>公共祖先</strong> $\therefore lca(u, v) = root’$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">5e6</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to_node, id;</span><br><span class="line">    edge(<span class="keyword">int</span> t, <span class="keyword">int</span> i): to_node(t), id(i) &#123;&#125;</span><br><span class="line">    ~edge() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edges[SIZE];</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; querys[SIZE];</span><br><span class="line"><span class="keyword">int</span> father[SIZE], mark[SIZE], ans[SIZE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfa</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (father[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> father[x] = getfa(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mark[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = edges[x].begin(); i != edges[x].end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (mark[*i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        tarjan(*i);</span><br><span class="line">        father[*i] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = querys[x].begin(); i != querys[x].end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = (*i).to_node, id = (*i).id;</span><br><span class="line">        <span class="keyword">if</span> (mark[y] == <span class="number">2</span>)</span><br><span class="line">            ans[id] = getfa(y);</span><br><span class="line">    &#125;</span><br><span class="line">    mark[x] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">        mark[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        edges[u].emplace_back(v);</span><br><span class="line">        edges[v].emplace_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (x == y)</span><br><span class="line">            ans[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            querys[x].emplace_back(edge(y, i));</span><br><span class="line">            querys[y].emplace_back(edge(x, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tarjan(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>$\Theta{(n + m)}$</p><p>搜索过程是$\Theta{(n)}$的, 而其中的求解过程可以单独<strong>拆出来看</strong>, 它就是一个$\Theta{(m)}$</p><p>但我的存边方式似乎不够优秀, 导致<strong>比上一篇文章还慢</strong>!!!</p><p>下次一定要用邻接表55555</p><p><a href="https://www.luogu.com.cn/record/30231788" target="_blank" rel="noopener">评测记录/(ㄒoㄒ)/~~</a></p><p>还是用一张表来分析分析求$\text{LCA}$的各种算法的优劣之处吧!</p><table><thead><tr><th align="center">算法</th><th align="center">优劣</th><th align="center">时间复杂度</th><th align="center">评测结果</th></tr></thead><tbody><tr><td align="center">朴素</td><td align="center">比较好想2333</td><td align="center">$\Theta{(nm)}$</td><td align="center">$\text{TLE}$</td></tr><tr><td align="center">倍增优化</td><td align="center">也比较好想, 但是较容易敲挂</td><td align="center">$\Theta{((n + m)logn)}$</td><td align="center">$\text{AC}$</td></tr><tr><td align="center">Tarjan</td><td align="center">比较精妙, 也不太好写</td><td align="center">$\Theta{(n + m)}$</td><td align="center">$\text{AC}$</td></tr></tbody></table><p>说明: 以上评测结果属于理想情况, 如果碰到一些爱卡常的毒瘤出题人(如<a href="https://www.luogu.com.cn" target="_blank" rel="noopener">某谷</a>的神鱼), 特别是你的存边方式像我一样, 那我就不知道了</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> LCA </tag>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记-LCA-1</title>
      <link href="/2020/01/28/algorithm-lca/"/>
      <url>/2020/01/28/algorithm-lca/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p>咕了好久的博客了, 该写些文章了</p></blockquote><a id="more"></a><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一个点的<strong>祖先</strong>: 这个比较好理解吧, 就是从该节点出发, 一路<strong>向上</strong>走能碰到的就是其祖先了</p><p>两个点的<strong>公共祖先</strong>: 就是<strong>同一棵树</strong>上两个节点的<strong>祖先集合</strong>中的<strong>交集</strong></p><p><strong>最近公共祖先</strong>就是这个交集里面最<strong>靠下</strong>的</p><ul><li>注意到以上的表述中经常出现<strong>向上</strong>或<strong>靠下</strong>等字眼, 说明求最近公共祖先的算法肯定与求节点的<strong>高度</strong>有关</li></ul><h2 id="朴素算法法求LCA"><a href="#朴素算法法求LCA" class="headerlink" title="朴素算法法求LCA"></a>朴素算法法求LCA</h2><p>想象一下这个过程: </p><ul><li><p>两个节点先跳到<strong>同一个高度</strong></p></li><li><p>如果两节点相遇 (即原先两个节点存在<strong>祖孙关系</strong>), 该点即为LCA, 退出</p></li><li><p>否则, 一起<strong>向上跳</strong>, 直到相遇</p></li></ul><h2 id="优化-先讲第一种"><a href="#优化-先讲第一种" class="headerlink" title="优化 (先讲第一种)"></a>优化 (先讲第一种)</h2><blockquote><p>以上这种一层一层跳的方法太慢了, 面对一棵巨大的树时会跑得巨慢, 我们要尝试优化这个过程</p><p>试想一下: 如果用<strong>倍增</strong>跳呢? 是不是速度立刻就上去了?</p></blockquote><h3 id="一些前置工作"><a href="#一些前置工作" class="headerlink" title="一些前置工作"></a>一些前置工作</h3><ul><li>用倍增的思想求出节点 $x$ 往上跳 $2^p$ 步后可以到达的节点, 存在 $fa[x][p]$ 中</li><li>用 $\text{BFS}$ 或 $\text{DFS}$ 求出节点 $x$ 的祖先, 存在 $deep[x]$ 中</li></ul><p>这样, 每次跳的时候, 可以通过比较 $deep[a]$ 是否等于 $deep[b]$ 来判断<strong>是否在同一层</strong>, 并增加跳的长度, 把朴素算法的时间复杂度优化到 $log$ 级别</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>从<strong>根节点</strong>遍历整棵树, 顺便记录一下子节点的信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">node nod = que.front(); que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = edges[nod.x].begin(); i != edges[nod.x].end(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((*i) != nod.fa) <span class="comment">// 该节点不为父节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        que.emplace(node(*i, nod.x));</span><br><span class="line">        deep[*i] = deep[nod.x] + <span class="number">1</span>; <span class="comment">// 求deep[]数组</span></span><br><span class="line">        fa[*i][<span class="number">0</span>] = nod.x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= deep[*i]; j++) <span class="comment">// 倍增法求fa[]数组</span></span><br><span class="line">            fa[*i][j] = fa[fa[*i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开始愉快地跳跃"><a href="#开始愉快地跳跃" class="headerlink" title="开始愉快地跳跃"></a>开始愉快地跳跃</h3><ul><li><p>先跳到同一高度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (deep[a] &lt; deep[b])</span><br><span class="line">    swap(a, b);</span><br><span class="line"><span class="keyword">if</span> (!deep[b])</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = MAXP; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (deep[fa[a][i]] &gt;= deep[b])</span><br><span class="line">        a = fa[a][i];</span><br><span class="line">    <span class="keyword">if</span> (a == b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两个点一起往上跳</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = MAXP; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[a][i] != fa[b][i])</span><br><span class="line">    &#123;</span><br><span class="line">        a = fa[a][i];</span><br><span class="line">        b = fa[b][i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br></pre></td></tr></table></figure></li></ul><h2 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, fa;</span><br><span class="line">    node(<span class="keyword">int</span> xx = <span class="number">0</span>, <span class="keyword">int</span> ffa = <span class="number">0</span>) : x(xx), fa(ffa) &#123;&#125;</span><br><span class="line">    ~node() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">5e6</span> + <span class="number">1</span>, MAXP = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edges[SIZE];</span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; que;</span><br><span class="line"><span class="keyword">int</span> n, m, s;</span><br><span class="line"><span class="keyword">int</span> fa[SIZE][MAXP + <span class="number">1</span>], deep[SIZE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    que.emplace(node(st, <span class="number">0</span>));</span><br><span class="line">    deep[st] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node nod = que.front(); que.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = edges[nod.x].begin(); i != edges[nod.x].end(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((*i) != nod.fa)</span><br><span class="line">            &#123;</span><br><span class="line">                que.emplace(node(*i, nod.x));</span><br><span class="line">                deep[*i] = deep[nod.x] + <span class="number">1</span>;</span><br><span class="line">                fa[*i][<span class="number">0</span>] = nod.x;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= deep[*i]; j++)</span><br><span class="line">                    fa[*i][j] = fa[fa[*i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deep[a] &lt; deep[b])</span><br><span class="line">        swap(a, b);</span><br><span class="line">    <span class="keyword">if</span> (!deep[b])</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXP; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (deep[fa[a][i]] &gt;= deep[b])</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">        <span class="keyword">if</span> (a == b)</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXP; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (fa[a][i] != fa[b][i])</span><br><span class="line">        &#123;</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">            b = fa[b][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        edges[u].emplace_back(v);</span><br><span class="line">        edges[v].emplace_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    bfs(s);</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lca(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>$$\Theta{(n + nlog_2n + mlog_2n)} = \Theta{((n + m)logn)}$$</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> LCA </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解-洛谷1198</title>
      <link href="/2020/01/15/solution-luogu-1198/"/>
      <url>/2020/01/15/solution-luogu-1198/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p>初二蒟蒻的第一篇题解…</p></blockquote><a id="more"></a><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul><li>ST表</li></ul><p>令 $st[ i ][ j ]$ 为 $\max \limits_{1 \leq t \leq (i + 2^j - 1)} arr[t]$</p><p>每在序列 $arr$ 的后面加入一个新值(假设是 $arr[ n ]$)时</p><p>它只会影响到一类 $st[ i ][ j ]$ 当且仅当</p><center>$i + 2^j - 1 = n$</center><p>也就是说，只会影响到所有<strong>终点为$n$的区间</strong></p><p>将上述式子变形得:</p><center>$i = n - 2^j + 1$</center><p>所以，我们可以穷举这个$j$，使得 $1 \leq 2^j \leq n$</p><p>那么就可以定出这个长为$j$，终点为$n$的区间:</p><center>$st[ i ][ j ] = st[ n - 2^j + 1 ][j]$</center><h1 id="Talk-is-cheap-show-me-the-code"><a href="#Talk-is-cheap-show-me-the-code" class="headerlink" title="Talk is cheap, show me the code."></a>Talk is cheap, show me the code.</h1><h2 id="Insert-函数-区间修改"><a href="#Insert-函数-区间修改" class="headerlink" title="Insert 函数 (区间修改)"></a>Insert 函数 (区间修改)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll num)</span> </span>&#123;</span><br><span class="line">    n++;</span><br><span class="line">    st[n][<span class="number">0</span>] = num; <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = n - (<span class="number">1</span> &lt;&lt; i) + <span class="number">1</span>;</span><br><span class="line">        st[tmp][i] = max(st[tmp][i - <span class="number">1</span>], st[tmp + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][i - <span class="number">1</span>]); <span class="comment">//这里的tmp其实就是原文中的i, 同理，这里的i是原文中的j</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Solve-函数-区间求最值"><a href="#Solve-函数-区间求最值" class="headerlink" title="Solve 函数 (区间求最值)"></a>Solve 函数 (区间求最值)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数l代表返回的是长度为 l ，终点为 n 的区间最大值</span></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = (<span class="keyword">int</span>)(<span class="built_in">log</span>(<span class="keyword">double</span>(l)) / <span class="built_in">log</span>(<span class="number">2.0</span>)); <span class="comment">// 不懂log换底公式的请自行翻阅高中必修四</span></span><br><span class="line">    <span class="keyword">return</span> max(st[n - l + <span class="number">1</span>][k], st[n - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码:"></a>完整代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ASK_SZ = <span class="number">200001</span>, LOG = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line">ll d, last_ans;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll st[ASK_SZ][LOG];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll num)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> op;</span><br><span class="line">    ll num;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; op &gt;&gt; num;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">'Q'</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (last_ans = solve(num)) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            insert((num + last_ans) % d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = (<span class="keyword">int</span>)(<span class="built_in">log</span>(<span class="keyword">double</span>(l)) / <span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">    <span class="keyword">return</span> max(st[n - l + <span class="number">1</span>][k], st[n - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ll num)</span> </span>&#123;</span><br><span class="line">    n++;</span><br><span class="line">    st[n][<span class="number">0</span>] = num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = n - (<span class="number">1</span> &lt;&lt; i) + <span class="number">1</span>;</span><br><span class="line">        st[tmp][i] = max(st[tmp][i - <span class="number">1</span>], st[tmp + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转载自<a href="https://106887.blog.luogu.org/solution-p1198" target="_blank" rel="noopener">我的洛谷blog</a>, 2019-09-04 22:30:26</p><p>修改: 2020/01/16 修改格式 &amp; 表述, 使其更加简洁易懂</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 倍增 </tag>
            
            <tag> ST表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解-洛谷1280</title>
      <link href="/2019/12/20/solution-luogu-1280/"/>
      <url>/2019/12/20/solution-luogu-1280/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Linhk1606/Linhk1606@V1.0/VSCode-happy-holidays.png" alt=""></p><a id="more"></a><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p>这是蒟蒻我的第二篇题解，也是第一篇DP题解，可喜可贺</p></blockquote><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="1-错误示范"><a href="#1-错误示范" class="headerlink" title="(1) 错误示范"></a>(1) 错误示范</h2><blockquote><p>第一眼看过去，便不难想到构造:<br>令 $dp[i]$ 表示从时间点 <strong>$1$ ~ $i$</strong> 的<strong>最大空暇时间</strong><br>则不难得到以下(伪)代码:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">  <span class="keyword">if</span> 第i分钟没有任务 :</span><br><span class="line">      dp[i] = dp[i - <span class="number">1</span>] + <span class="number">1</span> <span class="comment">#意思是第i分钟可以休息，前面用dp[i - 1]决定</span></span><br><span class="line">  <span class="keyword">else</span> :</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> maps[i]: <span class="comment">#maps[i]数组存储结束时间正好在第i分钟的每一个任务的时长</span></span><br><span class="line">dp[i] = max(dp[i], dp[i - maps[i][j]])</span><br><span class="line"><span class="comment">#意思是前i分钟的休息时间只能等于这个任务做之前的休息时间</span></span><br><span class="line"></span><br><span class="line">print(dp[n]) <span class="comment">#输出dp[n]</span></span><br></pre></td></tr></table></figure><h2 id="2-问题呈现"><a href="#2-问题呈现" class="headerlink" title="(2) 问题呈现"></a>(2) 问题呈现</h2><blockquote><p>$dp[i]$ 的计算只考虑了<strong>这个时间点</strong>做完的任务, 也就是说,<br>有可能 Nick <strong>直到下班了也没有做完任务</strong>, 此时做最后一项任务的时间段也会被算为空暇时间.</p></blockquote><h2 id="3-改进"><a href="#3-改进" class="headerlink" title="(3) 改进"></a>(3) 改进</h2><p><strong>倒着写!!!</strong></p><blockquote><p>令 $dp[i]$ 表示从时间点 <strong>$i$ ~ $n$</strong> 的<strong>最大空暇时间</strong><br>这样做的好处在于, 它考虑的不再是<strong>做完的时间</strong>, 而变成了每个任务的<strong>开始时间</strong>(Nick 总不会勤奋到提前几分钟开始工作吧), 这样就完美的避免了以上那个问题:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n, <span class="number">1</span>, <span class="number">-1</span>): <span class="comment">#倒着循环</span></span><br><span class="line">  <span class="keyword">if</span> 第i分钟没有任务 :</span><br><span class="line">      dp[i] = dp[i + <span class="number">1</span>] + <span class="number">1</span> <span class="comment">#意思是第i分钟可以休息，后面用dp[i + 1]决定</span></span><br><span class="line">  <span class="keyword">else</span> :</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> maps[i]: <span class="comment">#maps[i]数组存储开始时间正好在第i分钟的每一个任务的结束时间</span></span><br><span class="line">dp[i] = max(dp[i], dp[i + maps[i][j]])</span><br><span class="line"><span class="comment">#意思是后i分钟的休息时间只能等于这个任务做完后的休息时间</span></span><br><span class="line"></span><br><span class="line">print(dp[<span class="number">1</span>]) <span class="comment">#输出dp[1]</span></span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">100001</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[SIZE];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; maps[SIZE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start, do_time;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; start &gt;&gt; do_time;</span><br><span class="line">        maps[start].push_back(do_time);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = maps[i].size();</span><br><span class="line">        <span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tmp; j++) &#123;</span><br><span class="line">                dp[i] = max(dp[i], dp[i + maps[i][j]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i] = dp[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转载自<a href="https://106887.blog.luogu.org/solution-p1280" target="_blank" rel="noopener">我的洛谷blog</a>, 2019-10-30 20:59:52</p><p>修改: 2019/12/20 修改格式 &amp; 表述, 使其更加简洁易懂</p>]]></content>
      
      
      <categories>
          
          <category> OI </category>
          
          <category> Solution </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
